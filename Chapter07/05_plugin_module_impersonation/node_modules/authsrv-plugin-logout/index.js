const parentRequire = module.parent.require;

const authService = parentRequire('./lib/authService');
const db = parentRequire('./lib/db');
const app = parentRequire('./app');

const tokensDb = db.sublevel('tokens');

// 기존 login 저장
const oldLogin = authService.login;

// 프록시 버전으로 대체
authService.login = (username, password, callback) => {
  // 프록시 함수에서 원래의 반환값을 가로채기 위해
  // 원래의 함수 호출
  oldLogin(username, password, (err, token) => {
    if (err) return callback(err);

    tokensDb.put(token, {
      username: username
    }, () => {
      callback(null, token);
    });
  });
}

const oldCheckToken = authService.checkToken;

authService.checkToken = (token, callback) => {
  tokensDb.get(token, function (err, res) {
    if (err) return callback(err);

    oldCheckToken(token, callback);
  });
}

authService.logout = (token, callback) => {
  tokensDb.del(token, callback);
}

app.get('/logout', (req, res, next) => {
  authService.logout(req.query.token, function() {
    res.status(200).send({ok: true});
  });
});
